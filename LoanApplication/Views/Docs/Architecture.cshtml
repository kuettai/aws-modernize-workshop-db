<!DOCTYPE html>
<html>
<head>
    <title>System Architecture - Workshop Documentation</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background-color: #f8f9fa; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; margin: -30px -30px 30px -30px; border-radius: 8px 8px 0 0; }
        .nav { display: flex; gap: 20px; margin: 20px 0; }
        .nav a { padding: 10px 20px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; }
        .nav a:hover { background: #0056b3; }
        .section { margin: 30px 0; }
        .code-block { background: #f8f9fa; border: 1px solid #e9ecef; border-radius: 5px; padding: 15px; margin: 15px 0; overflow-x: auto; font-family: 'Courier New', monospace; }
        .architecture-diagram { background: #f8f9fa; border: 2px dashed #dee2e6; padding: 30px; text-align: center; margin: 20px 0; border-radius: 8px; }
        .component-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
        .component-card { border: 1px solid #dee2e6; border-radius: 8px; padding: 20px; }
        .layer-presentation { border-left: 4px solid #28a745; }
        .layer-business { border-left: 4px solid #ffc107; }
        .layer-data { border-left: 4px solid #dc3545; }
        .flow-diagram { background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🏗️ System Architecture</h1>
            <h2>Detailed Technical Architecture</h2>
            <p>Deep dive into the Loan Application System design and components</p>
        </div>

        <div class="nav">
            <a href="/docs">Overview</a>
            <a href="/docs/architecture">Architecture</a>
            <a href="/docs/database">Database</a>
            <a href="/docs/migration">Migration Plan</a>
            <a href="/">← Back to Application</a>
        </div>

        <div class="section">
            <h2>🏛️ Three-Tier Architecture</h2>
            <div class="architecture-diagram">
                <pre style="text-align: left; font-family: monospace; font-size: 14px;">
┌─────────────────────────────────────────────────────────────────────────────┐
│                           PRESENTATION TIER                                │
├─────────────────────────────────────────────────────────────────────────────┤
│  Web Browser (Client)          │  IIS Web Server                           │
│  ┌─────────────────────────┐    │  ┌─────────────────────────────────────┐  │
│  │ • HTML/CSS/JavaScript   │    │  │ • ASP.NET Core MVC                  │  │
│  │ • Responsive Design     │◄───┤  │ • Controllers (Home, API)          │  │
│  │ • AJAX API Calls        │    │  │ • Views (Razor Pages)              │  │
│  │ • Form Validation       │    │  │ • Static File Serving              │  │
│  └─────────────────────────┘    │  └─────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────┘
                                   │
                                   ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│                            BUSINESS TIER                                   │
├─────────────────────────────────────────────────────────────────────────────┤
│  Application Services           │  Domain Logic                            │
│  ┌─────────────────────────┐    │  ┌─────────────────────────────────────┐  │
│  │ • LoanService           │    │  │ • DSR Calculation                   │  │
│  │ • CreditCheckService    │◄───┤  │ • Risk Assessment                   │  │
│  │ • DSRCalculationService │    │  │ • Business Rules                    │  │
│  │ • Repository Pattern    │    │  │ • Validation Logic                  │  │
│  └─────────────────────────┘    │  └─────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────┘
                                   │
                                   ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│                             DATA TIER                                      │
├─────────────────────────────────────────────────────────────────────────────┤
│  Entity Framework Core          │  SQL Server 2022                        │
│  ┌─────────────────────────┐    │  ┌─────────────────────────────────────┐  │
│  │ • LoanApplicationContext│    │  │ • Applications Table                │  │
│  │ • Entity Models         │◄───┤  │ • Customers, Loans, Payments        │  │
│  │ • LINQ Queries          │    │  │ • Stored Procedures                 │  │
│  │ • Change Tracking       │    │  │ • Indexes & Constraints             │  │
│  └─────────────────────────┘    │  └─────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────┘
                </pre>
            </div>
        </div>

        <div class="section">
            <h2>🔧 Component Details</h2>
            <div class="component-grid">
                <div class="component-card layer-presentation">
                    <h3>Presentation Layer</h3>
                    <h4>Controllers:</h4>
                    <ul>
                        <li><strong>HomeController:</strong> Main application pages</li>
                        <li><strong>ApplicationsController:</strong> Loan application API</li>
                        <li><strong>CustomersController:</strong> Customer management API</li>
                        <li><strong>DocsController:</strong> Documentation system</li>
                    </ul>
                    <h4>Views:</h4>
                    <ul>
                        <li>Razor Pages for server-side rendering</li>
                        <li>Responsive HTML/CSS design</li>
                        <li>JavaScript for dynamic interactions</li>
                    </ul>
                </div>

                <div class="component-card layer-business">
                    <h3>Business Logic Layer</h3>
                    <h4>Services:</h4>
                    <ul>
                        <li><strong>LoanService:</strong> Loan lifecycle management</li>
                        <li><strong>CreditCheckService:</strong> Credit verification</li>
                        <li><strong>DSRCalculationService:</strong> Debt-to-income ratio</li>
                    </ul>
                    <h4>Repositories:</h4>
                    <ul>
                        <li><strong>ApplicationRepository:</strong> Application data access</li>
                        <li><strong>CustomerRepository:</strong> Customer data access</li>
                        <li>Repository pattern for data abstraction</li>
                    </ul>
                </div>

                <div class="component-card layer-data">
                    <h3>Data Access Layer</h3>
                    <h4>Entity Framework Core:</h4>
                    <ul>
                        <li>Code-First approach</li>
                        <li>LINQ query capabilities</li>
                        <li>Change tracking and migrations</li>
                        <li>Connection pooling</li>
                    </ul>
                    <h4>SQL Server Features:</h4>
                    <ul>
                        <li>Stored procedures for complex logic</li>
                        <li>Indexes for performance</li>
                        <li>Foreign key constraints</li>
                        <li>Transaction support</li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="section">
            <h2>🔄 Request Flow</h2>
            <div class="flow-diagram">
                <h3>Typical API Request Flow:</h3>
                <div class="code-block">
<pre>1. Client Request
   ↓
   GET /api/applications
   ↓
2. IIS Routes to Controller
   ↓
   ApplicationsController.GetApplications()
   ↓
3. Controller Calls Data Layer
   ↓
   _context.Applications.Where(...).Select(...).ToListAsync()
   ↓
4. Entity Framework Generates SQL
   ↓
   SELECT a.ApplicationId, a.ApplicationNumber, ...
   FROM Applications a
   INNER JOIN Customers c ON a.CustomerId = c.CustomerId
   ↓
5. SQL Server Executes Query
   ↓
   Returns result set
   ↓
6. EF Maps to Objects
   ↓
   Anonymous objects with selected properties
   ↓
7. Controller Returns JSON
   ↓
   HTTP 200 OK with JSON payload
   ↓
8. Client Receives Response</pre>
                </div>
            </div>
        </div>

        <div class="section">
            <h2>📊 Data Flow Patterns</h2>
            <h3>Loan Application Process:</h3>
            <div class="code-block">
<pre>Customer Submission → Application Creation → Credit Check → DSR Calculation → Decision
     │                        │                    │              │              │
     ▼                        ▼                    ▼              ▼              ▼
Customers Table      Applications Table    CreditChecks     Business Logic   Applications
                                          Table            Services          Status Update</pre>
            </div>

            <h3>Payment Processing:</h3>
            <div class="code-block">
<pre>Loan Approval → Loan Creation → Payment Schedule → Payment Processing → Balance Update
     │               │                    │                   │                │
     ▼               ▼                    ▼                   ▼                ▼
Applications    Loans Table      Calculated in        Payments Table    Loans Table
Status=Approved                  Application                            Balance Update</pre>
            </div>
        </div>

        <div class="section">
            <h2>🔐 Security Architecture</h2>
            <ul>
                <li><strong>Database Security:</strong> SQL Server Authentication with SA account</li>
                <li><strong>Connection Security:</strong> Encrypted connections (TrustServerCertificate=true for local)</li>
                <li><strong>Input Validation:</strong> Entity Framework parameterized queries</li>
                <li><strong>Error Handling:</strong> Structured exception handling with logging</li>
                <li><strong>Audit Trail:</strong> Comprehensive logging in AuditTrail table</li>
            </ul>
        </div>

        <div class="section">
            <h2>⚡ Performance Considerations</h2>
            <h3>Current Optimizations:</h3>
            <ul>
                <li><strong>Database Indexes:</strong> Primary keys and foreign key indexes</li>
                <li><strong>Query Optimization:</strong> Select only required columns using anonymous objects</li>
                <li><strong>Connection Pooling:</strong> Entity Framework connection pooling</li>
                <li><strong>Async Operations:</strong> All database operations are async</li>
                <li><strong>Pagination:</strong> API endpoints limit results (Take(10))</li>
            </ul>

            <h3>Potential Bottlenecks:</h3>
            <ul>
                <li><strong>IntegrationLogs Table:</strong> 149K+ records - candidate for NoSQL migration</li>
                <li><strong>Complex Stored Procedures:</strong> May need optimization in PostgreSQL</li>
                <li><strong>Large Result Sets:</strong> Applications and Payments tables growing</li>
            </ul>
        </div>

        <div class="section">
            <h2>🔧 Configuration</h2>
            <h3>Connection String:</h3>
            <div class="code-block">
<pre>"Server=localhost;Database=LoanApplicationDB;User Id=sa;Password=WorkshopDB123!;Encrypt=false;TrustServerCertificate=true;"</pre>
            </div>

            <h3>Entity Framework Context:</h3>
            <div class="code-block">
<pre>services.AddDbContext&lt;LoanApplicationContext&gt;(options =&gt;
    options.UseSqlServer(connectionString));</pre>
            </div>

            <h3>Dependency Injection:</h3>
            <div class="code-block">
<pre>services.AddScoped&lt;IApplicationRepository, ApplicationRepository&gt;();
services.AddScoped&lt;ICustomerRepository, CustomerRepository&gt;();
services.AddScoped&lt;ILoanService, LoanService&gt;();</pre>
            </div>
        </div>

        <div class="section" style="background: #fff3cd; padding: 20px; border-radius: 8px; border-left: 4px solid #ffc107;">
            <h3>🎯 Migration Readiness</h3>
            <p>This architecture is designed to demonstrate common enterprise patterns that need consideration during cloud migration:</p>
            <ul>
                <li><strong>Monolithic Design:</strong> Single application, single database</li>
                <li><strong>Stored Procedures:</strong> Business logic in database layer</li>
                <li><strong>Entity Relationships:</strong> Complex foreign key relationships</li>
                <li><strong>Mixed Data Patterns:</strong> OLTP and logging data in same database</li>
            </ul>
            <p><strong>Next:</strong> Review the <a href="/docs/database">database schema details</a> to understand the data model before migration.</p>
        </div>
    </div>
</body>
</html>