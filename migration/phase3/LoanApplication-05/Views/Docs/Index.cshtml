@model dynamic

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1>ðŸ“Š Database Modernization Workshop - Documentation</h1>
            <p class="lead">Interactive documentation and statistics for the loan application system</p>
        </div>
    </div>
    
    <!-- Migration Status Card -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-info">
                <div class="card-header bg-info text-white">
                    <h5><i class="fas fa-exchange-alt"></i> Migration Status - Phase 3: DynamoDB Integration</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="text-center">
                                <h6>Current Phase</h6>
                                <span class="badge badge-primary badge-lg" id="migration-phase">Loading...</span>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-center">
                                <h6>Data Sources</h6>
                                <small id="data-sources">Loading...</small>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-center">
                                <h6>Health Status</h6>
                                <span class="badge badge-success" id="health-status">Healthy</span>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-center">
                                <h6>Actions</h6>
                                <button class="btn btn-sm btn-outline-primary" onclick="validateMigration()">Validate</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Statistics Cards -->
    <div class="row">
        <!-- Business Data Statistics -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-database"></i> Business Data (PostgreSQL)</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            <div class="stat-item">
                                <span class="stat-number">@ViewBag.DatabaseStats.Applications</span>
                                <span class="stat-label">Applications</span>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="stat-item">
                                <span class="stat-number">@ViewBag.DatabaseStats.Customers</span>
                                <span class="stat-label">Customers</span>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="stat-item">
                                <span class="stat-number">@ViewBag.DatabaseStats.Loans</span>
                                <span class="stat-label">Loans</span>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="stat-item">
                                <span class="stat-number">@ViewBag.DatabaseStats.Payments</span>
                                <span class="stat-label">Payments</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Logging Data Statistics -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-line"></i> Logging Data (Hybrid)</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            <div class="stat-item">
                                <span class="stat-number" id="total-logs">@ViewBag.DatabaseStats.IntegrationLogs</span>
                                <span class="stat-label">Total Logs</span>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="stat-item">
                                <span class="stat-number text-danger" id="today-errors">Loading...</span>
                                <span class="stat-label">Today's Errors</span>
                            </div>
                        </div>
                        <div class="col-12 mt-3">
                            <button class="btn btn-outline-info btn-sm" onclick="refreshLoggingStats()">
                                <i class="fas fa-sync"></i> Refresh Stats
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Migration Controls -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card border-warning">
                <div class="card-header bg-warning">
                    <h5><i class="fas fa-cogs"></i> Migration Controls</h5>
                </div>
                <div class="card-body">
                    <div class="btn-group" role="group">
                        <button class="btn btn-outline-primary" onclick="enableDualWrite()">Enable Dual Write</button>
                        <button class="btn btn-outline-success" onclick="switchToDynamoReads()">Switch to DynamoDB Reads</button>
                        <button class="btn btn-outline-danger" onclick="disableSqlWrites()">Disable SQL Writes</button>
                    </div>
                    <div class="mt-3">
                        <button class="btn btn-info" onclick="testDualWrite()">Test Dual Write</button>
                        <button class="btn btn-secondary" onclick="showMigrationDashboard()">View Dashboard</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Migration status functions
async function refreshLoggingStats() {
    try {
        const response = await fetch('/Docs/LoggingStats');
        const data = await response.json();
        
        document.getElementById('total-logs').textContent = data.totalLogs;
        document.getElementById('today-errors').textContent = data.todayErrors;
        document.getElementById('migration-phase').textContent = data.migrationPhase;
        
        const dataSources = `Business: ${data.dataSources.businessData}<br>Logs: ${data.dataSources.loggingData}`;
        document.getElementById('data-sources').innerHTML = dataSources;
    } catch (error) {
        console.error('Failed to refresh stats:', error);
    }
}

async function validateMigration() {
    try {
        const response = await fetch('/api/MigrationDashboard/validate', { method: 'POST' });
        const result = await response.json();
        
        const status = result.isConsistent ? 'Consistent' : 'Inconsistent';
        const alertClass = result.isConsistent ? 'alert-success' : 'alert-warning';
        
        showAlert(`Validation Result: ${status}`, alertClass.replace('alert-', ''));
    } catch (error) {
        console.error('Validation failed:', error);
        showAlert('Validation failed', 'danger');
    }
}

async function enableDualWrite() {
    try {
        const response = await fetch('/api/Migration/enable-dual-write', { method: 'POST' });
        const result = await response.json();
        showAlert(result.message, 'success');
        refreshLoggingStats();
    } catch (error) {
        showAlert('Failed to enable dual write', 'danger');
    }
}

async function switchToDynamoReads() {
    try {
        const response = await fetch('/api/Migration/switch-to-dynamo-reads', { method: 'POST' });
        const result = await response.json();
        showAlert(result.message, 'success');
        refreshLoggingStats();
    } catch (error) {
        showAlert('Failed to switch to DynamoDB reads', 'danger');
    }
}

async function disableSqlWrites() {
    if (!confirm('Are you sure you want to disable SQL writes? This completes the migration to DynamoDB.')) {
        return;
    }
    
    try {
        const response = await fetch('/api/Migration/disable-sql-writes', { method: 'POST' });
        const result = await response.json();
        showAlert(result.message, 'success');
        refreshLoggingStats();
    } catch (error) {
        showAlert('Failed to disable SQL writes', 'danger');
    }
}

async function testDualWrite() {
    try {
        const response = await fetch('/api/Migration/test-dual-write', { method: 'POST' });
        const result = await response.json();
        
        if (result.success) {
            showAlert(`Test successful! Log ID: ${result.logId}`, 'success');
        } else {
            showAlert('Test failed', 'danger');
        }
    } catch (error) {
        showAlert('Test request failed', 'danger');
    }
}

function showAlert(message, type) {
    const alertHtml = `
        <div class="alert alert-${type} alert-dismissible fade show">
            ${message}
            <button type="button" class="close" data-dismiss="alert">&times;</button>
        </div>
    `;
    document.querySelector('.container-fluid').insertAdjacentHTML('afterbegin', alertHtml);
}

// Load initial data
document.addEventListener('DOMContentLoaded', function() {
    refreshLoggingStats();
});
</script>